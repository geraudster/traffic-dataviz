

* Static data import

Upload file:
- choose _mdate_ as date field
- set mapping to

  #+begin_src json
  {
  "properties": {
    "@timestamp": {
      "type": "date"
    },
    "Geo Point": {
      "type": "geo_point"
    },
    "Geo Shape": {
      "type": "geo_shape"
    },
    "arret": {
      "type": "boolean"
    },
    "bloque": {
      "type": "long"
    },
    "cdate": {
      "type": "date",
      "format": "yyyy-MM-dd HH:mm:ss"
    },
    "etat": {
      "type": "keyword"
    },
    "geom_err": {
      "type": "long"
    },
    "geom_o": {
      "type": "long"
    },
    "gid": {
      "type": "long"
    },
    "localise": {
      "type": "long"
    },
    "mdate": {
      "type": "date",
      "format": "yyyy-MM-dd HH:mm:ss"
    },
    "neutralise": {
      "type": "long"
    },
    "pmr": {
      "type": "long"
    },
    "retard": {
      "type": "long"
    },
    "rs_sv_arret_p_actu": {
      "type": "long"
    },
    "rs_sv_arret_p_suiv": {
      "type": "long"
    },
    "rs_sv_chem_l": {
      "type": "long"
    },
    "rs_sv_cours_a": {
      "type": "long"
    },
    "rs_sv_ligne_a": {
      "type": "long"
    },
    "sae": {
      "type": "long"
    },
    "sens": {
      "type": "keyword"
    },
    "statut": {
      "type": "keyword"
    },
    "terminus": {
      "type": "keyword"
    },
    "vehicule": {
      "type": "keyword"
    },
    "vitesse": {
      "type": "long"
    }
  }
}
  #+end_src
- set ingest pipeline to
  #+begin_src json
  {
  "description": "Ingest pipeline created by text structure finder",
  "processors": [
    {
      "date": {
        "field": "mdate",
        "timezone": "{{ event.timezone }}",
        "formats": [
          "yyyy-MM-dd HH:mm:ss"
        ]
      }
    },


{
  "json" : {
    "field" : "Geo Shape",
    "target_field" : "Geo Shape"
  }
}


  ]
}
  #+end_src

* With kube

#+begin_src
minikube start -p es-traffic --cpus=6 --memory=12g --vm
minikube profile es-traffic
minikube kubectl -- get pods -A
#+end_src

Install operator:
#+begin_src
helm repo add elastic https://helm.elastic.co


helm install elastic-operator elastic/eck-operator -n elastic-system --create-namespace



cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: eck-trial-license
  namespace: elastic-system
  labels:
    license.k8s.elastic.co/type: enterprise_trial
  annotations:
    elastic.co/eula: accepted 
EOF



#+end_src

Install stack:
#+begin_src
helm install eck-stack-with-fleet elastic/eck-stack \
    --values demo-stack.yaml -n elastic-stack --create-namespace
#+end_src

Check with:
#+begin_src 
$ watch kubectl get elastic -n elastic-stack -l "app.kubernetes.io/instance"=eck-stack-with-fleet
#+end_src

Retrieve elastic password:
#+begin_src
kubectl get secret elasticsearch-es-elastic-user -o=jsonpath='{.data.elastic}' -n elastic-stack | base64 --decode; echo
#+end_src

Port forward:
#+begin_src
kubectl port-forward service/kibana-kb-http 5601 -n elastic-stack
#+end_src

Open https://traffic-dataviz.127.0.0.1.nip.io:5601/

